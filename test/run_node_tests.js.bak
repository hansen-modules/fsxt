const fs = require('../');
const chalk = require('chalk');

let current = 'N/A';
const info = {};
const errors = {};
const asyncErrors = [];
let count = 0;
let successes = 0;
let failures = 0;

process.stdout.write('    ');

const rrf = require('rimraf');

const _fs = require('fs');
const deleteFolderRecursive = function(path) {
  if (_fs.existsSync(path)) {
    _fs.readdirSync(path).forEach(function(file, index){
      const curPath = path + "/" + file;
      if (_fs.lstatSync(curPath).isDirectory()) { // recurse
        deleteFolderRecursive(curPath);
      } else { // delete file
        _fs.unlinkSync(curPath);
      }
    });
    _fs.rmdirSync(path);
  }
};

function awaitEvent(emitter, event) {
  new Promise((resolve, reject) => {
    emitter.once(event, (a) => {
      resolve(a);
    });
  });
};

const func = (async (folder) => {
  const files = fs.diveSync(folder).filter((e) => e.indexOf('test-')>-1 && e.endsWith('.js'));
  for (let e of files) {
    current = e;
    count++;
    if (count > 80) {
      process.stdout.write('\n    ');
      count = 0;
    }
    try {
      rrf.sync('./test/node/test/tmp');
      rrf.sync('./test/node/test2/tmp');
    } catch (e) {
      deleteFolderRecursive('./test/node/test/tmp');
      deleteFolderRecursive('./test/node/test2/tmp');
    }

    const spawnSync = require('child_process').spawnSync;
    
    const { stdout, stderr, status } = spawnSync('node', [e], {stdio: ['pipe', 'pipe', 'pipe']});
    
    if (status == 0) {
      process.stdout.write(chalk.gray('.'));
      successes++;
    } else {
      errors[current] = (stderr || stdout).toString();
      process.stdout.write(chalk.red('!'));
      failures++;
    }
  }

  process.stdout.write('\n\n');
  process.stdout.write(chalk.green('succeeded: ' + successes) + '\n');
  process.stdout.write(chalk.red('errored:   ' + failures) + '\n');
  process.stdout.write(chalk.yellow('hidden:    ' + asyncErrors.length) + '\n');

  //process.stdout.write('\n\n');
  //// process.stdout.write(JSON.stringify(errors));
  //process.stdout.write(Object.keys(errors).map((e) => chalk.blue(e + ': ') + '\n    ' + (errors[e].split('\n').join('\n    '))).join('\n\n'));
  //process.stdout.write('\n\n');
  //
  //process.stdout.write('(end of input)\n\n');
});

(async () => {
  await func('./test/node').catch(e => console.error(e));
  await func('./test2/node').catch(e => console.error(e));
})();
